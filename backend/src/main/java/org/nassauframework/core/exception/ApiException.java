package org.nassauframework.core.exception;


import java.io.Serial;

/**
 * Exception with a predefined error code.
 *
 * @author Jordi Jaspers
 */
public class ApiException extends NassauException {

    /**
     * Unique serial id, generated by IntelliJ.
     */
    @Serial
    private static final long serialVersionUID = -8644471182585187053L;

    /**
     * ApiError associated with this exception.
     */
    private final ApiError apiError;

    /**
     * Construct an API error.
     *
     * @param apiError the error code.
     */
    protected ApiException(final ApiError apiError) {
        this(apiError, null, null);
    }

    /**
     * Construct an API error with a custom message.
     *
     * @param apiError the error code.
     */
    protected ApiException(final ApiError apiError, final String message) {
        this(apiError, null, message);
    }

    /**
     * Construct an API error from a Throwable.
     *
     * @param apiError the error code
     * @param cause    the cause of the error
     */
    protected ApiException(final ApiError apiError, final Throwable cause) {
        this(apiError, cause, null);
    }

    /**
     * Construct an API error from a Throwable with a custom message.
     *
     * @param apiError the error code
     * @param cause    the cause of the error
     */
    protected ApiException(final ApiError apiError, final Throwable cause, final String message) {
        super(message, cause);
        this.apiError = apiError;
    }

    /**
     * Getter for the ApiError.
     *
     * @return the ApiError
     */
    public ApiError getApiError() {
        return apiError;
    }

    /**
     * Convenience method to retrieve the error code from the contained API error.
     *
     * @return the error code
     */
    public String getErrorCode() {
        return apiError == null ? null : apiError.getErrorCode();
    }

    /**
     * Convenience method to retrieve the reason from the contained API error.
     *
     * @return the reason
     */
    public String getReason() {
        return apiError == null ? null : apiError.getReason();
    }
}
